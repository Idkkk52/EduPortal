Твоя задача - написать образовательный портал (на локальном хосте) используя Python и фрэймворк Flask. Я буду по очереди говорить тебе конкретные функции, которые необходимо добавлять в WEB-приложение, после чего ты должен изменять какие-то файлы в существующем проекте (или создать новый файл), после чего объяснять в каких местах произошли изменения.
Вот полное описание функций WEB-портала:
"В современном мире школьники 9-11 классов сталкиваются с
возрастающими требованиями к уровню знаний и навыков, необходимых
для успешной сдачи экзаменов и поступления в вузы. Несмотря на
наличие большого количества образовательных ресурсов, многие из них
недостаточно структурированы, зачастую в них отсутствует
персонализированный подход и интерактивность, что усложняет процесс
подготовки и снижает его эффективность. Школьники испытывают
информационную перегрузку, недостаток поддержки и мотивации, они
вынуждены использовать множество различных образовательных
платформ, что затрудняет их учебу.
Для решения этой проблемы предлагается разработать приложение с
веб-интерфейсом - образовательный портал, который объединит все
необходимые учебные материалы, интерактивные задания и тесты в одной
удобной среде. Портал должен обеспечивать персонализированный подход
к обучению, адаптироваться под уровень подготовки и интересы каждого
ученика, предоставлять инструменты для отслеживания прогресса и
анализа успеваемости, а также мотивировать учащихся с помощью
геймификации и других интерактивных элементов. Реализация этого
проекта позволит создать уникальную образовательную платформу,
которая поможет школьникам 9-11 классов эффективно подготовиться к
экзаменам, повысить уровень знаний и развить необходимые навыки для
дальнейшего обучения и профессионального роста.
Функциональное задание:
Обязательная функциональность:
● регистрация и авторизация пользователей (профили ученика,
учителя и администратора с ролями разного уровня доступа),
реализация механизма с помощью JWT, OAuth2.0 (вход через
сторонние сервисы Yandex, Google);
● модуль для управления курсами, содержащими структурированные
учебные материалы:
o лекции - в виде презентаций;
o видеоуроки - в виде видеозаписей;
o методические материалы - в виде текстовых документов;
● использование системы тегов и категорий для удобной навигации;
● поддержка интерактивных элементов (встроенные тесты, задания);
● модуль подготовки к экзаменам (тестовое решение экзаменационных
вариантов);
● статистика и успеваемость;
● обсуждения (форум).
Требования к пользовательскому интерфейсу:
● использование компонентного подхода для создания динамичного и
адаптивного интерфейса;
● обеспечение кроссплатформенности;
● производительность:
○ интерфейс должен быстро реагировать на действия пользователя,
обеспечивая минимальное время отклика;
○ минимизация количества запросов к серверу и сокращение
объема передаваемых данных, например, за счет использования
кеша и сжатия;
○ использование техники «ленивой загрузки» для асинхронной
загрузки несущественных компонентов и ресурсов, для
ускорения первоначальной загрузки страницы."
В проекте допустимо использования Python, HTML 5, CSS 3, JavaScript, вместо базы данных использую папки с json-файлами.
Структура нашего текущего проекта выглядит так:













static/css/styles.css:
"
:root {
    --primary-color: #2c3e50;
    --secondary-color: #3498db;
    --gradient-start: #2980b9;
    --gradient-end: #2c3e50;
}

html, body {
    height: 100%;
}

body {
    display: flex;
    flex-direction: column;
    font-family: 'Roboto', sans-serif;
    background-color: #f8f9fa;
}

main {
    flex: 1 0 auto;
}

footer {
    flex-shrink: 0;
    margin-top: auto;
}

/* static/css/styles.css (обновляем стили навбара) */

.navbar {
  min-height: 60px; /* Уменьшаем высоту */
  padding: 0.5rem 1rem; /* Уменьшаем отступы */
}

.navbar-brand {
  font-size: 1.25rem; /* Уменьшаем размер логотипа */
  padding: 0.25rem 0;
}

.navbar-nav .nav-link {
  font-size: 0.9rem; /* Размер шрифта пунктов меню */
  padding: 0.5rem 0.75rem !important; /* Компактные отступы */
  white-space: nowrap; /* Запрещаем перенос текста */
}

.navbar-toggler {
  padding: 0.25rem 0.5rem;
  font-size: 0.9rem;
}

/* Делаем выпадающее меню компактнее */
.dropdown-menu {
  min-width: 200px;
  padding: 0.5rem;
}

.dropdown-item {
  font-size: 0.9rem;
  padding: 0.25rem 1rem;
}

/* Оптимизация для мобильных устройств */
@media (max-width: 992px) {
  .navbar-collapse {
    padding-top: 0.5rem;
  }

  .navbar-nav .nav-link {
    padding: 0.5rem 1rem !important;
  }

  .dropdown-menu {
    margin-left: 1rem;
    width: calc(100% - 2rem);
  }
}

/* Уменьшаем кнопки в навбаре */
.navbar .btn {
  padding: 0.25rem 0.75rem;
  font-size: 0.9rem;
  margin-left: 0.5rem;
}


.bg-primary-gradient {
    background: linear-gradient(135deg, var(--gradient-start), var(--gradient-end));
}

.hero-section {
    padding: 100px 0;
    background: linear-gradient(rgba(44, 62, 80, 0.9), rgba(44, 62, 80, 0.9)),
                url('../images/hero-bg.jpg') center/cover;
    color: white;
}

.feature-card {
    transition: transform 0.3s;
    border: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.feature-card:hover {
    transform: translateY(-10px);
}

.btn-custom {
    background: var(--secondary-color);
    color: white;
    padding: 12px 30px;
    border-radius: 30px;
    font-weight: 500;
}
.auth-form-container {
    min-height: calc(100vh - 200px); /* 200px - примерная высота навбара + футера */
}

.wrapper {
    min-height: 100%;
    height: auto !important;
    height: 100%;
    margin: 0 auto -142px; /* the bottom margin is the negative value of the footer's height */
}
.footer, .push {
    height: 142px; /* .push must be the same height as .footer */
}

/* Форум */
#messagesList .card {
    transition: transform 0.2s;
}

#messagesList .card:hover {
    transform: translateY(-2px);
}

.like-btn, .dislike-btn {
    min-width: 80px;
}

.delete-btn {
    opacity: 0;
    transition: opacity 0.2s;
}

.card:hover .delete-btn {
    opacity: 1;
}

/* Градиент для навбара */
.navbar.bg-primary-gradient {
    background: linear-gradient(135deg, #2980b9, #2c3e50) !important;
}

/* Цвет текста в навбаре */
.navbar-dark .navbar-nav .nav-link {
    color: rgba(255, 255, 255, 0.9) !important;
}

.navbar-dark .navbar-nav .nav-link:hover {
    color: rgba(255, 255, 255, 1) !important;
}

/* Кнопки в навбаре */
.navbar-dark .btn-outline-light {
    border-color: rgba(255, 255, 255, 0.5);
    color: rgba(255, 255, 255, 0.9);
}

.navbar-dark .btn-outline-light:hover {
    background-color: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.8);
}

/* Стили для тостов */
.forum-toast {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 15px 25px;
  border-radius: 8px;
  color: white;
  font-weight: 500;
  z-index: 1000;
  animation: slideIn 0.3s ease-out;
}

.forum-toast-success {
  background: #28a745;
}

.forum-toast-error {
  background: #dc3545;
}

@keyframes slideIn {
  from { transform: translateX(100%); }
  to { transform: translateX(0); }
}

/* Стили для навбара */
.main-navbar {
  transition: background 0.3s ease;
  padding: 1rem 2rem;
}

/* Стили для сообщений */
.forum-message {
  margin-bottom: 1.5rem;
  padding: 1.5rem;
  border-radius: 12px;
  background: white;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.like-btn.active {
    background: #28a745 !important;
    color: white !important;
}

.dislike-btn.active {
    background: #dc3545 !important;
    color: white !important;
}

/* Стили для кнопок реакций */
.btn-outline-success.liked {
    background-color: #28a745 !important;
    color: white !important;
    border-color: #28a745 !important;
}

.btn-outline-danger.disliked {
    background-color: #dc3545 !important;
    color: white !important;
    border-color: #dc3545 !important;
}

/* Ховер-эффекты */
.btn-outline-success:hover {
    background-color: #218838 !important;
    color: white !important;
}

.btn-outline-danger:hover {
    background-color: #c82333 !important;
    color: white !important;
}

.liked {
    background-color: #28a745 !important;
    color: white !important;
    border-color: #28a745 !important;
}

.disliked {
    background-color: #dc3545 !important;
    color: white !important;
    border-color: #dc3545 !important;
}

/* Стили для решенных задач */
.task-item.solved.correct {
    background-color: #e8f5e9;
    border-left: 4px solid #28a745;
}

.task-item.solved.incorrect {
    background-color: #ffebee;
    border-left: 4px solid #dc3545;
}

/* Анимация изменения состояния */
.task-item {
    transition: all 0.3s ease;
}

/* Стили для сообщений */
.alert {
    margin-bottom: 1rem;
    padding: 0.75rem 1.25rem;
    border-radius: 0.25rem;
}

.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

/* Стили для кнопок показа ответа/объяснения */
.btn-show-answer,
.btn-show-explanation {
    background: none;
    border: none;
    color: #0d6efd;
    padding: 0;
    cursor: pointer;
    text-decoration: underline dotted;
    transition: color 0.2s;
}

.btn-show-answer:hover,
.btn-show-explanation:hover {
    color: #0a58ca;
    text-decoration: underline;
}

.correct-answer {
    background-color: #f8f9fa;
    padding: 10px;
    border-radius: 5px;
    margin-top: 10px;
}

/* Стиль для блока с объяснением */
.explanation .card-body {
    background-color: #f8f9fa;
    border-radius: 5px;
}
"





static/js/forum.js:
"
// ====================
// Конфигурация
// ====================
const API_BASE_URL = '/forum';
const NAVBAR_COLOR = 'linear-gradient(135deg, #2980b9, #2c3e50)';

// ====================
// Инициализация
// ====================
document.addEventListener('DOMContentLoaded', () => {
    initNavbarStyles();
    initMessageHandlers();
});

// ====================
// Обработка сообщений
// ====================
const initMessageHandlers = () => {
    document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', handleDelete);
    });
    console.log('Обработчики инициализированы');
};



// ====================
// Проверка прав
// ====================


const canDeleteMessage = (messageElement) => {
    if (!messageElement) return false;

    const isAdmin = messageElement.dataset.isAdmin === 'True';
    const isOwner = messageElement.dataset.userId === CURRENT_USER_ID;

    return isAdmin || isOwner;
};


const handleDelete = async (event) => {
    event.preventDefault();
    event.stopPropagation();

    try {
        const btn = event.currentTarget;
        const messageId = btn.dataset.id;
        const messageElement = btn.closest('[data-message-id]');
        console.log(messageElement.dataset.isAdmin);
        console.log('Начало удаления сообщения:', messageId);

        // Проверка прав
        if (!canDeleteMessage(messageElement)) {
            alert('Нет прав на удаление');
            return;
        }

        // Подтверждение удаления
        if (!confirm('Вы точно хотите удалить это сообщение?')) {
            return;
        }

        // Отправка запроса
        const response = await fetch(`/forum/delete/${messageId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': CSRF_TOKEN
            }
        });
        console.log(CSRF_TOKEN);
        console.log('Ответ сервера:', response);

        if (!response.ok) {
            throw new Error('Ошибка сервера');
        }

        const result = await response.json();
        console.log('Результат удаления:', result);

        if (result.success) {
            messageElement.remove();
            console.log('Сообщение удалено');
        } else {
            throw new Error(result.error || 'Ошибка при удалении');
        }

    } catch (error) {
        console.error('Ошибка:', error);
        alert('Ошибка при удалении: ' + error.message);
    }
};



// ====================
// Инициализация навбара
// ====================
const initNavbarStyles = () => {
    const navbar = document.querySelector('.navbar');
    if (navbar) {
        navbar.style.background = NAVBAR_COLOR;
        navbar.style.color = 'white';
    }
};


// Инициализация
document.querySelectorAll('.like-btn').forEach(btn => {
    btn.addEventListener('click', () => handleReaction('like', btn));
});

document.querySelectorAll('.dislike-btn').forEach(btn => {
    btn.addEventListener('click', () => handleReaction('dislike', btn));
});


const updateButtons = (btn, reaction) => {
    const likeBtn = btn.closest('.card').querySelector('.like-btn');
    const dislikeBtn = btn.closest('.card').querySelector('.dislike-btn');

    // Сбрасываем все стили
    likeBtn.classList.remove('active');
    dislikeBtn.classList.remove('active');

    // Применяем стиль к активной кнопке
    if (reaction === 'like') {
        likeBtn.classList.add('active');
    } else if (reaction === 'dislike') {
        dislikeBtn.classList.add('active');
    }
};

const updateReactionStyles = (messageId, reaction) => {
    const card = document.querySelector(`[data-message-id="${messageId}"]`);
    if (!card) return;

    const likeBtn = card.querySelector('.like-btn');
    const dislikeBtn = card.querySelector('.dislike-btn');

    likeBtn?.classList.remove('liked');
    dislikeBtn?.classList.remove('disliked');

    if (reaction === 'like') {
        likeBtn?.classList.add('liked');
    } else if (reaction === 'dislike') {
        dislikeBtn?.classList.add('disliked');
    }
};

const handleReaction = async (type, btn) => {
    const messageId = btn.dataset.id;

    try {
        const response = await fetch(`/forum/${type}/${messageId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': CSRF_TOKEN
            }
        });

        const result = await response.json();

        if (result.success) {
            // Обновляем счетчики
            btn.closest('.card').querySelector('.like-btn .count').textContent = result.likes;
            btn.closest('.card').querySelector('.dislike-btn .count').textContent = result.dislikes;

            // Обновляем стили
            updateReactionStyles(messageId, result.user_reaction);
        }
    } catch (error) {
        alert(`Ошибка: ${error.message}`);
    }
};


// forum.js (дополнение)
const initReactions = async () => {
    document.querySelectorAll('.card[data-message-id]').forEach(async card => {
        const messageId = card.dataset.messageId;
        try {
            const response = await fetch(`/forum/reaction/${messageId}`);
            const data = await response.json();
            updateReactionStyles(messageId, data.reaction);
        } catch (error) {
            console.error('Ошибка получения реакции:', error);
        }
    });
};

document.addEventListener('DOMContentLoaded', () => {
    initNavbarStyles();
    initMessageHandlers();
    initReactions(); // Добавляем инициализацию реакций
});
"





static/js/groups.js:
"
document.addEventListener('DOMContentLoaded', function() {
    // Обработка подтверждения удаления
    const deleteForms = document.querySelectorAll('.delete-group-form');
    deleteForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            if (!confirm('Вы уверены, что хотите удалить группу? Это действие нельзя отменить.')) {
                e.preventDefault();
            }
        });
    });
});
"







templates/auth/form_base.html:
"
{% extends "base/layout.html" %}



{% block content %}
<div class="row justify-content-center mt-5 auth-form-container">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body p-4">
                {% block form_content %}{% endblock %}
            </div>
        </div>
    </div>
</div>



{% if form_data %}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            {% for field in ['login', 'email', 'full_name', 'school', 'birth_date'] %}
                if("{{ form_data.get(field, '') }}") {
                    document.getElementById('{{ field }}').value = "{{ form_data.get(field, '') }}";
                }
            {% endfor %}

            const accountType = "{{ form_data.get('account_type', '') }}";
            if(accountType) {
                document.getElementById('account_type').value = accountType;
            }
        });
    </script>
{% endif %}
{% endblock %}
"





templates/auth/login:
"
{% extends "auth/form_base.html" %}

{% block title %}Вход в систему{% endblock %}

{% block content %}
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body p-4">
                <h2 class="text-center mb-4">{{ self.title() }}</h2>
                {% if error %}
                <div class="alert alert-danger">{{ error }}</div>
                {% endif %}
                <form method="POST">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                    <div class="mb-3">
                        <label for="login" class="form-label">Логин или Email</label>
                        <input type="text" class="form-control" id="login" name="login" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Пароль</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary w-100">
                        {% block submit_text %}Войти{% endblock %}
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>


{% endblock %}
"





templates/auth/register.html:
"
{% extends "auth/form_base.html" %}

{% block title %}Регистрация{% endblock %}


{% block content %}
<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-body p-4">
                <h2 class="text-center mb-4">{{ self.title() }}</h2>
                {% if error %}
                <div class="alert alert-danger">{{ error }}</div>
                {% endif %}
                <form method="POST">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                    <div class="mb-3">
                        <label for="login" class="form-label">Логин</label>
                        <input type="text" class="form-control" id="login" name="login" required
                               value="{{ request.form.login if request.form }}">
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" name="email" required
                               value="{{ request.form.email if request.form }}">
                    </div>
                    <div class="mb-3">
                        <label for="full_name" class="form-label">Полное имя</label>
                        <input type="text" class="form-control" id="full_name" name="full_name" required
                               value="{{ request.form.full_name if request.form }}">
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Пароль</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label for="school" class="form-label">Школа</label>
                        <input type="text" class="form-control" id="school" name="school"
                               value="{{ request.form.school if request.form }}">
                    </div>
                    <div class="mb-3">
                        <label for="birth_date" class="form-label">Дата рождения</label>
                        <input type="date" class="form-control" id="birth_date" name="birth_date" required
                               value="{{ request.form.birth_date if request.form }}">
                    </div>
                    <div class="mb-3">
                        <label for="account_type" class="form-label">Тип учетной записи</label>
                        <select class="form-select" id="account_type" name="account_type" required>
                            {% if request.form.get('account_type') == 'student' %}
                                <option value="student" selected>Ученик</option>
                            {% else %}
                                <option value="student">Ученик</option>
                            {% endif %}

                            {% if request.form.get('account_type') == 'teacher' %}
                                <option value="teacher" selected>Учитель</option>
                            {% else %}
                                <option value="teacher">Учитель</option>
                            {% endif %}

                            {% if request.form.get('account_type') == 'admin' %}
                                <option value="admin" selected>Администратор</option>
                            {% else %}
                                <option value="admin">Администратор</option>
                            {% endif %}
                        </select>
                    </div>
                    <div id="adminPasswordGroup" class="mb-3" style="display: {% if request.form.get('account_type') == 'admin' %}block{% else %}none{% endif %};">
                        <label for="admin_password" class="form-label">Админ-пароль</label>
                        <input type="password" class="form-control" id="admin_password" name="admin_password"
                               value="{{ request.form.admin_password if request.form }}">
                    </div>

                    <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        const accountType = document.getElementById('account_type');
                        const adminGroup = document.getElementById('adminPasswordGroup');

                        adminGroup.style.display = accountType.value === 'admin' ? 'block' : 'none';

                        accountType.addEventListener('change', function() {
                            adminGroup.style.display = this.value === 'admin' ? 'block' : 'none';
                        });
                    });
                    </script>
                    <button type="submit" class="btn btn-primary w-100">
                        {% block submit_text %}Зарегистрироваться{% endblock %}
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

{% endblock %}
"





templates/base/layout.html:
"
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}EduPortal{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    {% block css %}{% endblock %}
    <link rel="icon" href="{{ url_for('static', filename='images/favicon.ico') }}">
</head>
<body>
    {% include 'partials/_navbar.html' %}

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>
    {% block js %}{% endblock %}
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
"




templates/exams/index.html:
"
{% extends "base/layout.html" %}

{% block title %}Обучалка{% endblock %}

{% block content %}
<div class="container">
    <h1>ЕГЭ по информатике</h1>
    <!-- Контент будет добавлен позже -->
</div>
{% endblock %}
"





templates/forum/index.html:
"
{% extends "base/layout.html" %}

{% block js %}
<script>
    const CURRENT_USER_ID = "{{ current_user_id }}";
    const CSRF_TOKEN = "{{ csrf_token }}";
    console.log('Current user ID:', CURRENT_USER_ID);
    console.log(CSRF_TOKEN);
</script>
<script>
function updateSort() {
    const sortSelect = document.getElementById('sortSelect');
    const sortBy = sortSelect.value;
    const url = new URL(window.location);
    url.searchParams.set('sort', sortBy);
    window.location.href = url.toString();
}
</script>
<script src="{{ url_for('static', filename='js/forum.js') }}"></script>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h1>Форум</h1>

            <!-- Форма нового сообщения -->
            <div class="card mb-4">
                <div class="card-body">
                    <form action="{{ url_for('forum') }}" method="POST">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token }}"/>
                        <textarea class="form-control mb-3" name="text" rows="3" required></textarea>
                        <button type="submit" class="btn btn-primary">Отправить</button>
                    </form>
                </div>
            </div>

            <!-- Сортировка -->
            <div class="mb-3">
                <label for="sortSelect">Сортировка:</label>
                <select class="form-select" id="sortSelect" onchange="updateSort()">
                    {% if sort_by == 'recent' %}
                    <option value="recent" selected>Сначала новые</option>
                    {% else %}
                    <option value="recent">Сначала новые</option>
                    {% endif %}

                    {% if sort_by == 'popular' %}
                    <option value="popular" selected>По популярности</option>
                    {% else %}
                    <option value="popular">По популярности</option>
                    {% endif %}
                </select>
            </div>

            <!-- Список сообщений -->
            <div id="messagesList">
                {% for message in messages %}
                <div class="card mb-3" data-is-admin="{{ current_user.account_type == 'admin' }}" data-user-id="{{ message.user_id }}" data-message-id="{{ message.id }}">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">

                            <h5 class="card-title">{{ message.author }}</h5>
                            <div>
                                {% if current_user.account_type == 'admin' or current_user_id == message.user_id %}
                                <button class="btn btn-sm btn-danger delete-btn" data-id="{{ message.id }}" title="Удалить сообщение">
                                    Удалить
                                </button>
                                {% endif %}
                            </div>
                        </div>
                        <p class="card-text">{{ message.text }}</p>
                        <div class="d-flex gap-2">
                            <button class="btn btn-sm btn-outline-success like-btn" data-id="{{ message.id }}">
                                👍 <span class="count">{{ message.likes }}</span>
                            </button>
                            <button class="btn btn-sm btn-outline-danger dislike-btn" data-id="{{ message.id }}">
                                👎 <span class="count">{{ message.dislikes }}</span>
                            </button>
                        </div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<script>
    function updateSort() {
        const sortSelect = document.getElementById('sortSelect');
        const sortBy = sortSelect.value;
        window.location.href = `/forum?sort=${sortBy}`;
    }
</script>

{% endblock %}
"







templates/groups/create_group.html:
"
{% extends "base/layout.html" %}
{% block title %}Создание группы{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Создание новой группы</h1>
    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
        <div class="mb-3">
            <label for="group_name" class="form-label">Название группы</label>
            <input type="text" class="form-control" id="group_name" name="group_name" required>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Описание группы</label>
            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Создать группу</button>
    </form>

    {% if token %}
    <div class="alert alert-success mt-4">
        <h4>Группа успешно создана!</h4>
        <p>Токен для присоединения: <strong>{{ token }}</strong></p>
        <p>Поделитесь этим токеном с учениками для вступления в группу</p>
    </div>
    {% endif %}
</div>
{% endblock %}
"





templates/groups/group.html:
"
{% extends "base/layout.html" %}
{% block title %}{{ group.name }}{% endblock %}

{% block js %}
<script src="{{ url_for('static', filename='js/groups.js') }}"></script>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h1 class="card-title">{{ group.name }}</h1>
                    <p class="card-text">{{ group.description }}</p>

                    <!-- Блок с токеном для создателя -->
                    {% if current_user.id == group.created_by or current_user.account_type == 'admin' %}
                    <div class="alert alert-info mt-3">
                        <h5>Токен группы:</h5>
                        <div class="input-group">
                            <input type="text" class="form-control"
                                   value="{{ group.token }}"
                                   id="groupToken"
                                   readonly>
                            <button class="btn btn-outline-secondary"
                                    type="button"
                                    onclick="copyToken()">
                                Копировать
                            </button>
                        </div>
                    </div>
                    {% endif %}

                    <div class="mt-4">
                        <h5>Информация о группе:</h5>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                <strong>Создатель:</strong> {{ group.creator.login }}
                            </li>
                            <li class="list-group-item">
                                <strong>Дата создания:</strong> {{ group.created_at|format_date }}
                            </li>
                            <li class="list-group-item">
                                <strong>Участников:</strong> {{ group.members|length }}
                            </li>
                        </ul>
                    </div>

                    <!-- Список участников -->
                    <div class="mt-4">
                        <h5>Участники группы:</h5>
                        <div class="list-group">
                            {% for member_id in group.members %}
                                {% set user = get_user_by_id(member_id) %}
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        {{ user.login }}
                                        {% if member_id == group.created_by %}
                                            <span class="badge bg-primary">Создатель</span>
                                        {% endif %}
                                    </div>
                                    {% if (current_user.id == group.created_by or current_user.account_type == 'admin')
                                        and member_id != current_user.id %}
                                    <form method="POST"
                                          action="{{ url_for('remove_member', token=group.token, user_id=member_id) }}">
                                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                                        <button type="submit" class="btn btn-danger btn-sm">
                                            Удалить
                                        </button>
                                    </form>
                                    {% endif %}
                                </div>
                            {% endfor %}
                        </div>
                    </div>

                    <div class="mt-4">
                        <a href="{{ url_for('my_groups') }}" class="btn btn-secondary">
                            ← Вернуться к списку групп
                        </a>
                    </div>

                    {% if current_user.id == group.created_by or current_user.account_type == 'admin' %}
                    <div class="mt-3">
                        <form action="{{ url_for('delete_group', token=group.token) }}" method="POST"
                              onsubmit="return confirm('Вы уверены, что хотите удалить группу? Это действие нельзя отменить.');">
                            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                            <button type="submit" class="btn btn-danger">
                                Удалить группу
                            </button>
                        </form>
                    </div>
                    {% endif %}

                                        <!-- Добавим после кнопки "Вернуться" -->
                    {% if current_user.id == group.created_by or current_user.account_type == 'admin' %}
                    <div class="mt-3">
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMaterialModal">
                            Добавить материал
                        </button>
                    </div>

                    <!-- Модальное окно для добавления материалов -->
                    <div class="modal fade" id="addMaterialModal" tabindex="-1">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Добавить материал в группу</h5>
                                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <form id="addMaterialForm" method="POST" action="{{ url_for('add_material_to_group', token=group.token) }}">
                                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

                                        <div class="mb-3">
                                            <label for="materialType" class="form-label">Тип материала</label>
                                            <select class="form-select" id="materialType" name="material_type" required>
                                                <option value="course">Курс</option>
                                                <option value="material">Обучающий материал</option>
                                                <option value="task">Задание</option>
                                            </select>
                                        </div>

                                        <div class="mb-3">
                                            <label for="materialId" class="form-label">ID материала</label>
                                            <input type="text" class="form-control" id="materialId" name="material_id" required>
                                            <div class="form-text">Введите ID материала, который хотите добавить</div>
                                        </div>
                                    </form>
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                                    <button type="submit" form="addMaterialForm" class="btn btn-primary">Добавить</button>
                                </div>
                            </div>
                        </div>
                    </div>
                    {% endif %}
                    <div class="mt-4">
                        <h3>Материалы группы</h3>

                        {% if group.materials %}
                        <div class="list-group">
                            {% for material in group.materials %}
                            <div class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h5>{{ material.type|capitalize }}</h5>
                                        <p class="mb-0">ID: {{ material.id }}</p>
                                        <small class="text-muted">
                                            Добавлено: {{ material.added_at|format_date }}
                                        </small>
                                    </div>
                                    {% if current_user.id == group.created_by or current_user.account_type == 'admin' %}
                                    <form action="{{ url_for('remove_material_from_group', token=group.token, material_id=material.id) }}"
                                          method="POST" onsubmit="return confirm('Вы уверены, что хотите удалить этот материал из группы?');">
                                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                                        <button type="submit" class="btn btn-danger btn-sm">Удалить</button>
                                    </form>
                                    {% endif %}
                                </div>
                            </div>
                            {% endfor %}
                        </div>
                        {% else %}
                        <div class="alert alert-info">В этой группе пока нет материалов</div>
                        {% endif %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function copyToken() {
    const tokenField = document.getElementById('groupToken');
    tokenField.select();
    document.execCommand('copy');
    alert('Токен скопирован в буфер обмена');
}
</script>
{% endblock %}
"





templates/joi_group.html:
"
{% extends "base/layout.html" %}
{% block title %}Присоединиться к группе{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Присоединение к группе</h1>

    <!-- Отображение flash-сообщений -->
    {% if messages %}
        {% for category, message in messages %}
            <div class="alert alert-{{ 'success' if category == 'success' else 'danger' if category == 'error' else 'warning' }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endif %}

    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
        <div class="mb-3">
            <label for="token" class="form-label">Токен группы</label>
            <input type="text" class="form-control" id="token" name="token" required>
            <div class="form-text">Получите токен у вашего преподавателя</div>
        </div>
        <button type="submit" class="btn btn-primary">Присоединиться</button>
    </form>
</div>
{% endblock %}
"





templates/groups/list.html:
"
{% extends "base/layout.html" %}
{% block title %}Мои группы{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Мои группы</h1>

    {% if not groups %}
    <div class="alert alert-info mt-4">Вы пока не состоите ни в одной группе</div>
    {% else %}
    <div class="row row-cols-1 row-cols-md-2 g-4 mt-3">
        {% for group in groups %}
        <div class="col">
          <a href="{{ url_for('group_detail', token=group.token) }}"
             class="text-decoration-none card-clickable">
                <div class="card h-100 shadow-sm">
                    <div class="card-body">
                        <h3 class="card-title">{{ group.name }}</h3>
                        <p class="card-text">{{ group.description }}</p>
                        <div class="mt-auto">
                            <small class="text-muted">
                                Создатель: {{ group.creator.login }}
                                <br>
                                Дата создания: {{ group.created_at|format_date }}
                            </small>
                        </div>
                    </div>
                </div>
            </a>
        </div>
        {% endfor %}
    </div>
    {% endif %}
</div>
{% endblock %}
"





templates/learn/edit_material.html:
"
{% extends "base/layout.html" %}
{% block title %}Редактировать материал{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Редактировать материал</h1>
    <form method="POST" enctype="multipart/form-data">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

        <!-- Поле "Название" -->
        <div class="mb-3">
            <label for="title" class="form-label">Название материала</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ material.title }}" required>
        </div>

        <!-- Поле "Содержание" -->
        <div class="mb-3">
            <label for="content" class="form-label">Содержание</label>
            <textarea class="form-control" id="content" name="content" rows="5" required>{{ material.content }}</textarea>
        </div>

        <!-- Поле "Изображение" -->
        <div class="mb-3">
            <label for="image" class="form-label">Изображение (опционально)</label>
            <input type="file" class="form-control" id="image" name="image">
            {% if material.image %}
                <div class="mt-2">
                    <img src="{{ url_for('static', filename='uploads/' + material.image) }}" class="img-fluid" alt="Текущее изображение">
                    <small class="text-muted">Текущее изображение</small>
                </div>
            {% endif %}
        </div>

        <!-- Кнопки -->
        <button type="submit" class="btn btn-primary">Сохранить изменения</button>
        <a href="{{ url_for('learn') }}" class="btn btn-secondary">Отмена</a>
    </form>
</div>
{% endblock %}
"





templates/learn/index.html:
"
{% extends "base/layout.html" %}
{% block title %}Обучалка{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Обучающие материалы</h1>
    <p class="lead">Здесь собраны все одобренные материалы для обучения.</p>

    {% if materials %}
        <div class="list-group">
            {% for material in materials %}
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <i style="color: gray;"> id: {{material.id }}</i>
                        <h2>{{ material.title }}</h2>
                        <div>
                            {% if current_user.id == material.author_id or current_user.account_type == 'admin' %}
                                <a href="{{ url_for('edit_material', material_id=material.id) }}" class="btn btn-warning btn-sm me-2">Редактировать</a>
                                <form action="{{ url_for('delete_material', material_id=material.id) }}" method="POST" class="d-inline">
                                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                                    <button type="submit" class="btn btn-danger btn-sm">Удалить</button>
                                </form>
                            {% endif %}
                        </div>
                    </div>
                    <p>{{ material.content }}</p>
                    {% if material.image %}
                        <img src="{{ url_for('static', filename='uploads/' + material.image) }}" class="img-fluid mb-3" alt="Изображение материала">
                    {% endif %}
                    <small class="text-muted">
                        Добавлено: {{ material.created_at | format_date }} | Автор: {{ material.author_login }}
                    </small>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="alert alert-info">Пока нет одобренных материалов.</div>
    {% endif %}
</div>
{% endblock %}
"





templates/moderation/materials.html:
"
{% extends "base/layout.html" %}
{% block title %}Модерация материалов{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Модерация обучающих материалов</h1>
    <p class="lead">Здесь отображаются все непроверенные материалы.</p>

    {% if materials %}
        <div class="list-group">
            {% for material in materials %}
                <div class="list-group-item">
                    <h5>{{ material.title }}</h5>
                    <p>{{ material.content }}</p>
                    {% if material.image %}
                        <img src="{{ url_for('static', filename='uploads/' + material.image) }}" class="img-fluid mb-3" alt="Изображение материала">
                    {% endif %}
                    <div class="d-flex gap-2">
                        <form action="{{ url_for('approve_material', material_id=material.id) }}" method="POST">
                            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                            <button type="submit" class="btn btn-success">Одобрить</button>
                        </form>
                        <form action="{{ url_for('reject_material', material_id=material.id) }}" method="POST">
                            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                            <button type="submit" class="btn btn-danger">Запретить</button>
                        </form>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="alert alert-info">Нет материалов для модерации.</div>
    {% endif %}
</div>
{% endblock %}
"




templates/tasks.html:
"
{% extends "base/layout.html" %}
{% block title %}Модерация заданий{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Модерация заданий</h1>
    <p class="lead">Непроверенные задания:</p>

    {% if tasks %}
        <div class="list-group">
            {% for task in tasks %}
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h5>Задание №{{ task.task_number }}</h5>
                            <div class="mb-2">
                                <span class="badge bg-info">{{ task.difficulty }}</span>
                            </div>
                            <p>{{ task.question }}</p>
                            <div class="text-muted small">
                                <p>Ответ: {{ task.answer }}</p>
                                {% if task.source %}<p>Источник: {{ task.source }}</p>{% endif %}
                                {% if task.explanation %}<p>Разбор: {{ task.explanation }}</p>{% endif %}
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <form action="{{ url_for('approve_task', task_id=task.id) }}" method="POST">
                                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                                <button type="submit" class="btn btn-success btn-sm">Одобрить</button>
                            </form>
                            <form action="{{ url_for('reject_task', task_id=task.id) }}" method="POST">
                                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>
                                <button type="submit" class="btn btn-danger btn-sm">Запретить</button>
                            </form>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    {% else %}
        <div class="alert alert-info">Нет заданий для модерации.</div>
    {% endif %}
</div>
{% endblock %}
"





templates/partials/_navbar.html:
"
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
</head>
<body>
<!-- templates/partials/_navbar.html -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary-gradient">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">EduPortal</a>

    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
      <span class="navbar-toggler-icon"></span>
    </button>
    {% if current_user.is_authenticated %}
    <div class="collapse navbar-collapse" id="navbarContent">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <!-- Основные пункты меню -->
        <li class="nav-item">
          <a class="nav-link" href="/learn">Обучалка</a>
        </li>

        <!-- Выпадающее меню "Тренировка" -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
            Тренировка
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="/exams">ЕГЭ</a></li>
            <li><a class="dropdown-item" href="/tasks">Задачи</a></li>
          </ul>
        </li>

        <!-- Учительские пункты -->
        {% if current_user.account_type in ['teacher', 'admin'] %}
        <li class="nav-item">
          <a class="nav-link" href="/add-task">Добавить задание</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/add-material">Добавить обучалку</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="/groups/create">Создать группу</a>
        </li>
        {% endif %}
        <li class="nav-item">
            <a class="nav-link" href="/groups/join">Присоединиться к группе</a>
        </li>

        <!-- Админские пункты -->
        {% if current_user.account_type == 'admin' %}
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
            Модерация
          </a>
          <ul class="dropdown-menu">
            <li><a class="dropdown-item" href="/moderation/tasks">Задания</a></li>
            <li><a class="dropdown-item" href="/moderation/materials">Обучающие материалы</a></li>
          </ul>
        </li>
        {% endif %}

        <!-- Общие пункты -->
        <li class="nav-item">
          <a class="nav-link" href="/forum">Форум</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/groups">Группы</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/forum">Курсы</a>
        </li>
      </ul>
      {% endif %}
      <!-- Правая часть с авторизацией -->
      <div class="d-flex align-items-center">
        {% if current_user.is_authenticated %}
        <div class="btn-group">
          <a href="/profile" class="btn btn-outline-light btn-sm">
            {{ current_user.login }}
          </a>
          <a href="/logout" class="btn btn-outline-light btn-sm">
            Выход
          </a>
        </div>
        {% else %}
        <div class="btn-group">
          <a href="/login" class="btn btn-light btn-sm">Вход</a>
          <a href="/register" class="btn btn-primary btn-sm">Регистрация</a>
        </div>
        {% endif %}
      </div>
    </div>
  </div>
</nav>
</body>
</html>
"





templates/tasks/index.html:
"
{% extends "base/layout.html" %}
{% block title %}Задачи{% endblock %}

{% block css %}
<style>
    .task-item { transition: background-color 0.3s; }
    .task-item.solved { background-color: #f0f8ff; }
    .task-item.solved.correct { background-color: #e8f5e9; }
    .task-item.solved.incorrect { background-color: #ffebee; }
    .solution-section { display: none; }
    .show-solution .solution-section { display: block; }
    .task-checkboxes .form-check {
        min-width: 60px;
        margin-left: 30px;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Тренировочные задания</h1>
    <p class="lead">Одобренные задания для подготовки:</p>

    <!-- Форма фильтров -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="GET" action="{{ url_for('tasks') }}">
                <div class="mb-3">
                    <label class="form-label">Выберите номера заданий:</label>
                    <div class="task-checkboxes">
                        {% for row in range(1, 28, 5) %}
                        <div class="d-flex flex-wrap gap-3 mb-2">
                            {% for number in range(row, row+5 if row+5 <= 28 else 28) %}
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       name="task_numbers"
                                       id="task{{ number }}"
                                       value="{{ number }}"
                                       {% if number in selected_tasks %} checked {% endif %}>
                                <label class="form-check-label" for="task{{ number }}">
                                    {{ number }}
                                </label>
                            </div>
                            {% endfor %}
                        </div>
                        {% endfor %}
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3">
                        <label for="difficulty" class="form-label">Сложность</label>
                        <select class="form-select" id="difficulty" name="difficulty" required>
                            <option value="Проще ЕГЭ" {% if difficulty == "Проще ЕГЭ" %}selected{% endif %}>Проще ЕГЭ</option>
                            <option value="Просто" {% if difficulty == "Просто" %}selected{% endif %}>Просто</option>
                            <option value="Средне" {% if difficulty == "Средне" %}selected{% endif %}>Средне</option>
                            <option value="Сложно" {% if difficulty == "Сложно" %}selected{% endif %}>Сложно</option>
                            <option value="Сложнее ЕГЭ" {% if difficulty == "Сложнее ЕГЭ" %}selected{% endif %}>Сложнее ЕГЭ</option>
                        </select>
                    </div>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Применить фильтры</button>
                    <button type="button" class="btn btn-outline-secondary" onclick="toggleAllCheckboxes()">
                        Выбрать все
                    </button>
                    <a href="{{ url_for('tasks') }}" class="btn btn-secondary">Сбросить</a>
                </div>
            </form>
        </div>
    </div>

    <script>
    function toggleAllCheckboxes() {
        const checkboxes = document.querySelectorAll('input[name="task_numbers"]');
        const allChecked = [...checkboxes].every(cb => cb.checked);

        checkboxes.forEach(cb => {
            cb.checked = !allChecked;
        });
    }
    </script>

    <!-- Список заданий -->
    {% if tasks %}
        <div class="list-group">
            {% for task in tasks %}
                <div class="list-group-item task-item
                            {% if task.id in solved_tasks %}
                                solved {% if solved_tasks[task.id] %}correct{% else %}incorrect{% endif %}
                            {% endif %}"
                     id="task-{{ task.id }}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <i style="color: gray;"> id: {{ task.id }}</i>
                            <h5>Задание №{{ task.task_number }}
                                <span class="badge bg-secondary">{{ task.difficulty }}</span>
                                {% if task.id in solved_tasks %}
                                    <span class="badge bg-{{ 'success' if solved_tasks[task.id] else 'danger' }}">
                                        {{ 'Решено верно' if solved_tasks[task.id] else 'Решено неверно' }}
                                    </span>
                                {% endif %}
                            </h5>
                            <p>{{ task.question }}</p>

                            <form class="answer-form" data-task-id="{{ task.id }}">
                                <div class="input-group mb-3">
                                    <input type="text" class="form-control answer-input"
                                           placeholder="Введите ваш ответ" required>
                                    <button class="btn btn-primary" type="submit">Проверить</button>
                                </div>
                            </form>

                            <div class="solution-section">
                                <div class="alert alert-success correct-alert" style="display:none;">
                                    ✓ Правильно!
                                </div>
                                <div class="alert alert-danger incorrect-alert" style="display:none;">
                                    ✗ Неправильно. Правильный ответ:
                                    <span class="correct-answer"></span>
                                </div>

                                {% if task.source %}
                                    <p class="text-muted small">Источник: {{ task.source }}</p>
                                {% endif %}

                                {% if task.explanation %}
                                    <div class="mt-3 explanation">
                                        <button class="btn btn-link btn-sm"
                                                type="button"
                                                data-bs-toggle="collapse"
                                                data-bs-target="#explanation-{{ task.id }}">
                                            Показать разбор
                                        </button>
                                        <div class="collapse" id="explanation-{{ task.id }}">
                                            <div class="card card-body">
                                                {{ task.explanation }}
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                        {% if current_user.id == task.author_id or current_user.account_type == 'admin' %}
                        <div class="ms-3">
                            <a href="{{ url_for('edit_task', task_id=task.id) }}"
                               class="btn btn-sm btn-outline-warning"
                               title="Редактировать задание">
                                ✎
                            </a>
                        </div>
                        {% endif %}
                    </div>
                </div>
            {% endfor %}
        </div>
    {% endif %}
</div>

{% block js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.answer-form').forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const taskId = form.dataset.taskId;
            const answerInput = form.querySelector('.answer-input');
            const taskElement = document.getElementById(`task-${taskId}`);

            if (!answerInput.value.trim()) {
                alert('Введите ответ');
                return;
            }

            try {
                const response = await fetch('/check-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-CSRF-Token': '{{ csrf_token() }}'
                    },
                    body: `task_id=${encodeURIComponent(taskId)}&answer=${encodeURIComponent(answerInput.value)}`
                });

                if (!response.ok) {
                    throw new Error('Ошибка сервера');
                }

                const result = await response.json();

                // Удаляем предыдущие сообщения
                taskElement.querySelectorAll('.alert').forEach(alert => alert.remove());

                // Создаем новое сообщение
                const alertDiv = document.createElement('div');
                alertDiv.classList.add('alert', result.is_correct ? 'alert-success' : 'alert-danger');
                alertDiv.textContent = result.is_correct ?
                    '✓ Правильно!' :
                    `✗ Неправильно. Правильный ответ: ${result.correct_answer}`;

                // Вставляем сообщение перед формой
                form.parentNode.insertBefore(alertDiv, form);

                // Обновляем статус задачи
                taskElement.classList.remove('solved', 'correct', 'incorrect');
                taskElement.classList.add('solved', result.is_correct ? 'correct' : 'incorrect');

                // Показываем раздел с решением
                taskElement.querySelector('.solution-section').style.display = 'block';

            } catch (error) {
                console.error('Ошибка:', error);
                alert('Произошла ошибка при проверке ответа');
            }
        });
    });
});
</script>
{% endblock %}
{% endblock %}
"





templates.add-material.html:
"
{% extends "base/layout.html" %}
{% block title %}Добавить материал{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Добавить материал</h1>
    <form method="POST" enctype="multipart/form-data">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

        <!-- Поле "Название" -->
        <div class="mb-3">
            <label for="title" class="form-label">Название материала</label>
            <input type="text" class="form-control" id="title" name="title" required>
        </div>

        <!-- Поле "Содержание" -->
        <div class="mb-3">
            <label for="content" class="form-label">Содержание</label>
            <textarea class="form-control" id="content" name="content" rows="5" required></textarea>
        </div>

        <!-- Поле "Изображение" -->
        <div class="mb-3">
            <label for="image" class="form-label">Изображение (опционально)</label>
            <input type="file" class="form-control" id="image" name="image">
        </div>

        <!-- Кнопки -->
        <button type="submit" class="btn btn-primary">Добавить</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">Назад</a>
    </form>
</div>
{% endblock %}
"





templates/add-task.html:
"
{% extends "base/layout.html" %}
{% block title %}Добавить задание{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Добавить новое задание</h1>
    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

        <div class="mb-3">
            <label for="task_number" class="form-label">Номер задания</label>
            <input type="number" class="form-control" id="task_number" name="task_number"
                   min="1" max="27" required>
        </div>

        <div class="mb-3">
            <label for="question" class="form-label">Условие задания</label>
            <textarea class="form-control" id="question" name="question"
                     rows="3" required></textarea>
        </div>

        <div class="mb-3">
            <label for="source" class="form-label">Источник</label>
            <input type="text" class="form-control" id="source" name="source">
        </div>

        <div class="mb-3">
            <label for="answer" class="form-label">Правильный ответ</label>
            <input type="text" class="form-control" id="answer" name="answer" required>
        </div>

        <div class="mb-3">
            <label for="explanation" class="form-label">Разбор задания</label>
            <textarea class="form-control" id="explanation" name="explanation"
                     rows="4"></textarea>
        </div>

        <!-- После поля "Разбор задания" добавим новое поле -->
        <div class="mb-3">
            <label for="difficulty" class="form-label">Сложность</label>
            <select class="form-select" id="difficulty" name="difficulty" required>
                <option value="Проще ЕГЭ">Проще ЕГЭ</option>
                <option value="Просто">Просто</option>
                <option value="Средне">Средне</option>
                <option value="Сложно">Сложно</option>
                <option value="Сложнее ЕГЭ">Сложнее ЕГЭ</option>
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Добавить задание</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">Назад</a>
    </form>
</div>
{% endblock %}
"





templates/edit_task.html:
"
{% extends "base/layout.html" %}
{% block title %}Редактировать задание{% endblock %}

{% block content %}
<div class="container mt-4">
    <h1>Редактировать задание №{{ task.task_number }}</h1>

    <form method="POST">
        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"/>

        <div class="mb-3">
            <label for="task_number" class="form-label">Номер задания</label>
            <input type="number" class="form-control" id="task_number" name="task_number"
                   min="1" max="27" required value="{{ task.task_number }}">
        </div>

        <div class="mb-3">
            <label for="question" class="form-label">Условие задания</label>
            <textarea class="form-control" id="question" name="question"
                     rows="3" required>{{ task.question }}</textarea>
        </div>

        <div class="mb-3">
            <label for="source" class="form-label">Источник</label>
            <input type="text" class="form-control" id="source" name="source" value="{{ task.source }}">
        </div>

        <div class="mb-3">
            <label for="answer" class="form-label">Правильный ответ</label>
            <input type="text" class="form-control" id="answer" name="answer" required value="{{ task.answer }}">
        </div>

        <div class="mb-3">
            <label for="explanation" class="form-label">Разбор задания</label>
            <textarea class="form-control" id="explanation" name="explanation"
                     rows="4">{{ task.explanation }}</textarea>
        </div>

        <!-- После поля "Разбор задания" добавим новое поле -->
        <div class="mb-3">
            <label for="difficulty" class="form-label">Сложность</label>
            <select class="form-select" id="difficulty" name="difficulty" required>
                <option value="Проще ЕГЭ" {% if task.difficulty == "Проще ЕГЭ" %}selected{% endif %}>Проще ЕГЭ</option>
                <option value="Просто" {% if task.difficulty == "Просто" %}selected{% endif %}>Просто</option>
                <option value="Средне" {% if task.difficulty == "Средне" %}selected{% endif %}>Средне</option>
                <option value="Сложно" {% if task.difficulty == "Сложно" %}selected{% endif %}>Сложно</option>
                <option value="Сложнее ЕГЭ" {% if task.difficulty == "Сложнее ЕГЭ" %}selected{% endif %}>Сложнее ЕГЭ</option>
            </select>
        </div>

        <div class="d-flex gap-2">
            <button type="submit" class="btn btn-primary">Сохранить</button>
            <a href="{{ url_for('tasks') }}" class="btn btn-secondary">Отмена</a>
        </div>
    </form>
</div>
{% endblock %}
"





templates/index.html:
"
{% extends "base/layout.html" %}

{% block css %}
<link href="{{ url_for('static', filename='css/styles.css') }}" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
{% endblock %}

{% block content %}


<section class="hero-section text-center">
    <div class="container">
        <h1 class="display-4 mb-4">Добро пожаловать на EduPortal{% if current_user.is_authenticated %}, {{ current_user.full_name }} {% endif %}</h1>
        <p class="lead mb-4">Персонализированная платформа для подготовки к экзаменам</p>
        {% if not current_user.is_authenticated %}
            <a href="/register" class="btn btn-custom">Начать обучение</a>
        {% endif %}
    </div>
</section>


<section class="py-5">
    <div class="container">
        <h2 class="text-center mb-5">Наши преимущества</h2>
        <div class="row g-4">
            <div class="col-md-4">
                <div class="card feature-card h-100">
                    <div class="card-body text-center">
                        <h3 class="card-title">📚 Структурированные курсы</h3>
                        <p class="card-text">Лекции, видеоуроки и тесты в одном месте</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card feature-card h-100">
                    <div class="card-body text-center">
                        <h3 class="card-title">📈 Анализ прогресса</h3>
                        <p class="card-text">Подробная статистика успеваемости</p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card feature-card h-100">
                    <div class="card-body text-center">
                        <h3 class="card-title">🎮 Геймификация</h3>
                        <p class="card-text">Мотивирующая система достижений</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


{% endblock %}
"





templates/profile.html:
"
{% extends "base/layout.html" %}
{% block title %}Профиль{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="row">
        <!-- Блок с аватаркой -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body text-center">
                    <img src="{{ url_for('static', filename='uploads/' + current_user.profile_image) if current_user.profile_image else url_for('static', filename='images/hero-bg.png') }}"
                         class="img-fluid rounded-circle mb-3"
                         style="width: 200px; height: 200px; object-fit: cover;">

                    <!-- Форма для загрузки аватарки -->
                    <form method="POST" action="/upload-avatar" enctype="multipart/form-data">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <div class="mb-3">
                            <input type="file" class="form-control" name="avatar" accept="image/*">
                        </div>
                        <button type="submit" class="btn btn-primary">Обновить фото</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Блок с личной информацией -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">Личная информация</h3>
                    <form method="POST" onsubmit="return validateProfileForm()">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">

                        <div class="mb-3">
                            <label class="form-label">Логин</label>
                            <input type="text" class="form-control" name="login"
                                   value="{{ current_user.login }}" required>
                            <div class="invalid-feedback" id="login-feedback">
                                Логин должен быть от 3 до 20 символов
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" name="email"
                                   value="{{ current_user.email }}" required>
                            <div class="invalid-feedback" id="email-feedback">
                                Введите корректный email
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Полное имя</label>
                            <input type="text" class="form-control" name="full_name"
                                   value="{{ current_user.full_name }}" required>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Школа</label>
                            <input type="text" class="form-control" name="school"
                                   value="{{ current_user.school }}">
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Дата рождения</label>
                            <input type="date" class="form-control" name="birth_date"
                                   value="{{ current_user.birth_date }}" required>
                            <div class="invalid-feedback" id="birthdate-feedback">
                                Дата рождения должна быть в формате ГГГГ-ММ-ДД
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary">Сохранить изменения</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

{% block js %}
<script>
function validateProfileForm() {
    const loginInput = document.querySelector('input[name="login"]');
    const emailInput = document.querySelector('input[name="email"]');
    const birthdateInput = document.querySelector('input[name="birth_date"]');
    let isValid = true;

    // Валидация логина
    if (loginInput.value.length < 3 || loginInput.value.length > 20) {
        loginInput.classList.add('is-invalid');
        isValid = false;
    } else {
        loginInput.classList.remove('is-invalid');
    }

    // Валидация email
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailPattern.test(emailInput.value)) {
        emailInput.classList.add('is-invalid');
        isValid = false;
    } else {
        emailInput.classList.remove('is-invalid');
    }

    // Валидация даты рождения
    const datePattern = /^\d{4}-\d{2}-\d{2}$/;
    if (!datePattern.test(birthdateInput.value)) {
        birthdateInput.classList.add('is-invalid');
        isValid = false;
    } else {
        birthdateInput.classList.remove('is-invalid');
    }

    return isValid;
}
</script>
{% endblock %}
{% endblock %}
"





app.py:
"
from functools import wraps
from os import abort
from flask import Flask, render_template, redirect, url_for, request, jsonify, flash, get_flashed_messages
from flask_login import LoginManager, current_user, login_user, logout_user, login_required
from utils import *
from flask_wtf.csrf import CSRFProtect, generate_csrf  # Добавить в импорты
from filters import format_date
import re


app = Flask(__name__)
app.config.from_object('config.Config')
csrf = CSRFProtect(app)  # Инициализация CSRF-защиты

# Добавим фильтр в Jinja2
app.jinja_env.filters['format_date'] = format_date


# Инициализация Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

ADMIN_PASSWORD = '52'


# Заглушка для модели пользователя
class User:
    def __init__(self, user_data):
        self.id = user_data['id']
        self.login = user_data['login']
        self.email = user_data['email']
        self.full_name = user_data['full_name']
        self.school = user_data.get('school', '')
        self.birth_date = user_data['birth_date']
        self.account_type = user_data['account_type']
        self.password_hash = user_data['password_hash']
        self.profile_image = user_data.get('profile_image', None)

    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return str(self.id)


@login_manager.user_loader
def load_user(user_id):
    users = get_users()
    user_data = next((u for u in users if str(u['id']) == user_id), None)
    return User(user_data) if user_data else None


# Декоратор для проверки ролей
def role_required(roles):
    def wrapper(fn):
        @wraps(fn)
        def decorated_view(*args, **kwargs):
            if not current_user.is_authenticated or current_user.account_type not in roles:
                abort()
            return fn(*args, **kwargs)
        return decorated_view
    return wrapper


# Маршруты
@app.route('/learn')
@login_required
def learn():
    # Получаем все одобренные материалы
    materials = load_materials()
    approved_materials = [m for m in materials if m.get('approved', False)]
    for m in approved_materials:
        m['author_login'] = get_user_by_id(m['author_id'])['login']
    return render_template('learn/index.html', materials=approved_materials)


@app.route('/exams')
@login_required
def exams():
    return render_template('exams/index.html')


@app.route('/tasks')
@login_required
def tasks():
    tasks = load_tasks()
    approved_tasks = [t for t in tasks if t.get('approved', False)]

    # Получаем выбранные номера
    selected_tasks = [int(i) for i in list(request.args.getlist('task_numbers'))]
    # print(selected_tasks)
    difficulty = request.args.get('difficulty', '')

    # Фильтрация по номерам
    if selected_tasks:
        selected_numbers = [int(n) for n in selected_tasks]
        approved_tasks = [t for t in approved_tasks if t['task_number'] in selected_numbers]

    # Остальная фильтрация
    if difficulty:
        approved_tasks = [t for t in approved_tasks if t['difficulty'] == difficulty]

    # Загрузка решенных заданий
    solved_tasks = get_solved_tasks(current_user.id)

    return render_template('tasks/index.html',
                           tasks=approved_tasks,
                           selected_tasks=selected_tasks,
                           solved_tasks=solved_tasks,
                           difficulty=difficulty)


@app.route('/add-task', methods=['GET', 'POST'])
@login_required
@role_required(['teacher', 'admin'])
def add_task():
    if request.method == 'POST':
        try:
            # Получаем данные из формы
            task_number = int(request.form.get('task_number'))
            question = request.form.get('question').strip()
            answer = request.form.get('answer').strip()
            source = request.form.get('source', '').strip()
            explanation = request.form.get('explanation', '').strip()
            difficulty = request.form.get('difficulty')  # Новое поле

            # Валидация данных
            if not (1 <= task_number <= 27):
                raise ValueError("Номер задания должен быть от 1 до 27")
            if not question or not answer or not difficulty:
                raise ValueError("Заполните обязательные поля")

            # Сохраняем задание
            new_task = {
                'id': generate_id(),
                'task_number': task_number,
                'question': question,
                'answer': answer,
                'source': source,
                'explanation': explanation,
                'difficulty': difficulty,  # Новое поле
                'author_id': current_user.id,
                'created_at': datetime.now().isoformat(),
                'approved': False
            }

            tasks = load_tasks()
            tasks.append(new_task)
            save_tasks(tasks)

            flash('Задание успешно добавлено!', 'success')
            return redirect(url_for('index'))

        except ValueError as e:
            flash(str(e), 'error')
            return redirect(url_for('add_task'))

    return render_template('add-task.html')


# Модерация заданий
@app.route('/moderation/tasks')
@login_required
@role_required(['admin'])
def moderation_tasks():
    tasks = load_tasks()
    unapproved_tasks = [t for t in tasks if not t.get('approved', False)]
    return render_template('moderation/tasks.html', tasks=unapproved_tasks)


@app.route('/moderation/approve-task/<task_id>', methods=['POST'])
@login_required
@role_required(['admin'])
def approve_task(task_id):
    tasks = load_tasks()
    for task in tasks:
        if task['id'] == task_id:
            task['approved'] = True
            task['approved_by'] = current_user.id
            task['approved_at'] = datetime.now().isoformat()
            break
    save_tasks(tasks)
    flash('Задание одобрено!', 'success')
    return redirect(url_for('moderation_tasks'))


@app.route('/moderation/reject-task/<task_id>', methods=['POST'])
@login_required
@role_required(['admin'])
def reject_task(task_id):
    tasks = load_tasks()
    tasks = [t for t in tasks if t['id'] != task_id]
    save_tasks(tasks)
    flash('Задание отклонено и удалено!', 'success')
    return redirect(url_for('moderation_tasks'))


@app.route('/check-answer', methods=['POST'])
@login_required
def check_answer():
    task_id = request.form.get('task_id')
    user_answer = request.form.get('answer', '').strip()

    tasks = load_tasks()
    task = next((t for t in tasks if t['id'] == task_id), None)

    if not task:
        return jsonify({'error': 'Задание не найдено'}), 404

    is_correct = (user_answer.lower() == task['answer'].lower())

    # Обновляем статус решения
    if 'solved_by' not in task:
        task['solved_by'] = []

    # Удаляем старый результат, если он есть
    task['solved_by'] = [s for s in task['solved_by'] if s['user_id'] != current_user.id]

    # Добавляем новый результат
    task['solved_by'].append({
        'user_id': current_user.id,
        'is_correct': is_correct,
        'timestamp': datetime.now().isoformat()
    })

    save_tasks(tasks)

    return jsonify({
        'is_correct': is_correct,
        'correct_answer': task['answer'],
        'explanation': task.get('explanation', '')
    })


@app.route('/task/edit/<task_id>', methods=['GET', 'POST'])
@login_required
def edit_task(task_id):
    if not current_user.is_authenticated:
        return redirect(url_for('login'))

    tasks = load_tasks()
    task = next((t for t in tasks if t['id'] == task_id), None)

    if task['author_id'] != current_user.id and current_user.account_type != 'admin':
        flash('У вас нет прав для редактирования этого задания', 'error')
        return redirect(url_for('tasks'))

    # Проверка прав
    if not task or (current_user.id != task['author_id']
                    and current_user.account_type != 'admin'):
        abort()

    if request.method == 'POST':
        try:
            # Обновляем данные
            task['task_number'] = int(request.form.get('task_number'))
            task['question'] = request.form.get('question').strip()
            task['answer'] = request.form.get('answer').strip()
            task['source'] = request.form.get('source', '').strip()
            task['explanation'] = request.form.get('explanation', '').strip()
            task['difficulty'] = request.form.get('difficulty')
            task['approved'] = False

            # Валидация
            if not (1 <= task['task_number'] <= 27):
                raise ValueError("Номер задания должен быть от 1 до 27")

            save_tasks(tasks)
            flash('Задание успешно обновлено!', 'success')
            return redirect(url_for('tasks'))

        except ValueError as e:
            flash(str(e), 'error')

    return render_template('edit_task.html', task=task)


@app.route('/add-material', methods=['GET', 'POST'])
@login_required
@role_required(['teacher', 'admin'])
def add_material():
    if request.method == 'POST':
        # Получаем данные из формы
        title = request.form.get('title')
        content = request.form.get('content')
        image = request.files.get('image')

        # Проверяем, заполнено ли поле "Название"
        if not title:
            flash('Поле "Название" обязательно для заполнения!', 'error')
            return redirect(url_for('add_material'))

        # Сохраняем материал в JSON-файл
        materials = load_materials()
        new_material = {
            'id': generate_id(),
            'title': title,
            'content': content,
            'image': image.filename if image else None,
            'author_id': current_user.id,
            'author_login': current_user.login,
            'created_at': datetime.now().isoformat(),
            'approved': False  # По умолчанию материал не одобрен
        }
        materials.append(new_material)
        save_materials(materials)

        # Сохраняем изображение, если оно было загружено
        if image:
            image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], image.filename)
            image.save(image_path)

        flash('Материал успешно добавлен и ожидает модерации!', 'success')
        return redirect(url_for('index'))

    return render_template('add-material.html')


@app.route('/moderation')
@login_required
@role_required(['admin'])
def moderation():
    return render_template('moderation.html')


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in current_app.config.get('ALLOWED_EXTENSIONS', {'png', 'jpg', 'jpeg', 'gif'})


@app.route('/upload-avatar', methods=['POST'])
@login_required
def upload_avatar():
    if 'avatar' not in request.files:
        flash('Файл не выбран', 'error')
        return redirect(url_for('profile'))

    file = request.files['avatar']
    if file.filename == '':
        flash('Файл не выбран', 'error')
        return redirect(url_for('profile'))

    if file and allowed_file(file.filename):
        try:
            # Генерируем уникальное имя файла
            filename = f"{current_user.id}_{int(time.time())}.{file.filename.rsplit('.', 1)[1].lower()}"
            filepath = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)

            # Сохраняем файл
            file.save(filepath)

            # Обновляем запись пользователя
            users = get_users()
            for user in users:
                if user['id'] == current_user.id:
                    # Удаляем старый аватар
                    if user.get('profile_image'):
                        old_path = os.path.join(current_app.config['UPLOAD_FOLDER'], user['profile_image'])
                        if os.path.exists(old_path):
                            try:
                                os.remove(old_path)
                            except Exception as e:
                                app.logger.error(f"Error deleting old avatar: {str(e)}")

                    user['profile_image'] = filename
                    break

            save_users(users)
            flash('Аватар успешно обновлен!', 'success')
        except Exception as e:
            app.logger.error(f"Avatar upload error: {str(e)}")
            flash('Ошибка при сохранении файла', 'error')
    else:
        flash('Разрешены только файлы: PNG, JPG, JPEG, GIF', 'error')

    return redirect(url_for('profile'))


@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    if request.method == 'POST':
        try:
            # Получаем данные из формы
            new_data = {
                'login': request.form.get('login').strip(),
                'email': request.form.get('email').strip(),
                'full_name': request.form.get('full_name').strip(),
                'school': request.form.get('school', '').strip(),
                'birth_date': request.form.get('birth_date')
            }

            # Валидация данных
            if len(new_data['login']) < 3 or len(new_data['login']) > 20:
                raise ValueError('Логин должен быть от 3 до 20 символов')

            if not re.match(r'^[^\s@]+@[^\s@]+\.[^\s@]+$', new_data['email']):
                raise ValueError('Введите корректный email')

            try:
                datetime.strptime(new_data['birth_date'], '%Y-%m-%d')
            except ValueError:
                raise ValueError('Некорректная дата рождения')

            # Проверка уникальности логина и email
            users = get_users()
            for user in users:
                if user['id'] != current_user.id:
                    if user['login'] == new_data['login']:
                        raise ValueError('Этот логин уже занят')
                    if user['email'] == new_data['email']:
                        raise ValueError('Этот email уже зарегистрирован')

            # Обновляем данные пользователя
            for user in users:
                if user['id'] == current_user.id:
                    user.update(new_data)
                    break

            save_users(users)
            flash('Данные успешно обновлены!', 'success')
            return redirect(url_for('profile'))

        except ValueError as e:
            flash(str(e), 'error')

    return render_template('profile.html')


# Обновляем маршруты
@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        login_cred = request.form.get('login').strip()
        password = request.form.get('password').strip()

        # Ищем пользователя по логину или email
        user_data = get_user_by_login(login_cred) or get_user_by_email(login_cred)

        if user_data and check_password_hash(user_data['password_hash'], password):
            user = User(user_data)
            login_user(user)
            return redirect(url_for('index'))

        return render_template('auth/login.html', error='Неверные учетные данные')

    return render_template('auth/login.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        account_type = request.form.get('account_type')
        admin_password = request.form.get('admin_password', '')

        if account_type == 'admin' and admin_password != ADMIN_PASSWORD:
            return render_template('auth/register.html',
                                   error='Неверный админ-пароль',
                                   form_data=request.form)

        try:
            login = request.form.get('login').strip()
            email = request.form.get('email').strip()
            password = request.form.get('password').strip()
            full_name = request.form.get('full_name').strip()
            school = request.form.get('school', '').strip()
            birth_date = request.form.get('birth_date')
            account_type = request.form.get('account_type')

            # Валидация даты рождения
            try:
                datetime.strptime(birth_date, '%Y-%m-%d')
            except ValueError:
                raise ValueError('Некорректная дата рождения')

            user, error = create_user(
                login=login,
                email=email,
                password=password,
                full_name=full_name,
                school=school,
                birth_date=birth_date,
                account_type=account_type
            )

            if error:
                raise ValueError(error)

            login_user(User(user))
            return redirect(url_for('index'))

        except ValueError as e:
            return render_template('auth/register.html',
                                   error=str(e),
                                   form_data=request.form)

    return render_template('auth/register.html')


@app.route('/forum', methods=['GET', 'POST'])
@login_required
def forum():
    if request.method == 'POST':
        # Обработка нового сообщения
        new_message = {
            'id': generate_id(),
            'user_id': current_user.id,
            'author': current_user.login,
            'text': request.form.get('text'),
            'timestamp': datetime.now().isoformat(),
            'likes': 0,
            'dislikes': 0,
            'liked_by': [],
            'disliked_by': []
        }

        if save_message(new_message):
            flash('Сообщение успешно опубликовано!', 'success')
        else:
            flash('Ошибка при публикации сообщения', 'error')

        sort_param = request.args.get('sort', 'recent')  # Получаем текущую сортировку
        return redirect(url_for('forum', sort=sort_param))  # Сохраняем параметр

    # Получаем параметр сортировки из запроса
    sort_by = request.args.get('sort', 'recent')
    messages = get_messages(sort_by)
    for i in messages:
        i['author'] = get_user_by_id(i['user_id'])['login']

    return render_template(
        'forum/index.html',
        messages=messages,
        current_user_id=current_user.id,
        csrf_token=generate_csrf(),
        sort_by=sort_by
    )


def update_reaction(message_id, reaction_type):
    messages = load_messages()
    for message in messages:
        if message['id'] == message_id:
            message[reaction_type] += 1
            break
    save_to_file('forum.json', {'messages': messages})


@app.route('/forum/like/<message_id>', methods=['POST'])
@login_required
def like_message(message_id):
    try:
        data = load_forum_data()
        message = next((msg for msg in data['messages'] if msg['id'] == message_id), None)

        if not message:
            return jsonify(success=False, error="Сообщение не найдено"), 404

        user_id = str(current_user.id)

        if user_id in message['liked_by']:
            message['likes'] -= 1
            message['liked_by'].remove(user_id)
        else:
            if user_id in message['disliked_by']:
                message['dislikes'] -= 1
                message['disliked_by'].remove(user_id)
            message['likes'] += 1
            message['liked_by'].append(user_id)

        save_forum_data(data)  # Убедитесь, что эта функция не вызывает ошибок
        return jsonify(
            success=True,
            likes=message['likes'],
            dislikes=message['dislikes'],
            user_reaction='like' if user_id in message['liked_by'] else 'none'
        )

    except Exception as e:
        # Логируем ошибку и возвращаем JSON
        print(f"Ошибка при обработке лайка: {str(e)}")
        return jsonify(success=False, error="Внутренняя ошибка сервера"), 500


@app.route('/forum/dislike/<message_id>', methods=['POST'])
@login_required
def dislike_message(message_id):
    try:
        data = load_forum_data()
        message = next((msg for msg in data['messages'] if msg['id'] == message_id), None)

        if not message:
            return jsonify(success=False, error="Сообщение не найдено"), 404

        user_id = str(current_user.id)

        if user_id in message['disliked_by']:
            message['dislikes'] -= 1
            message['disliked_by'].remove(user_id)
        else:
            if user_id in message['liked_by']:
                message['likes'] -= 1
                message['liked_by'].remove(user_id)
            message['dislikes'] += 1
            message['disliked_by'].append(user_id)

        save_forum_data(data)  # Убедитесь, что эта функция не вызывает ошибок
        return jsonify(
            success=True,
            likes=message['likes'],
            dislikes=message['dislikes'],
            user_reaction='dislike' if user_id in message['disliked_by'] else 'none'
        )

    except Exception as e:
        # Логируем ошибку и возвращаем JSON
        print(f"Ошибка при обработке лайка: {str(e)}")
        return jsonify(success=False, error="Внутренняя ошибка сервера"), 500


@app.route('/forum/delete/<message_id>', methods=['DELETE'])
@login_required
def delete_message(message_id):
    try:
        # print(f"\n=== DELETE REQUEST ===")
        # print(f"User ID: {current_user.id}, Account Type: {current_user.account_type}")
        # print(f"Target Message ID: {message_id}")

        # Получаем сообщение
        message = get_message_by_id(message_id)
        if not message:
            # print("Message not found")
            return jsonify(success=False, error="Сообщение не найдено"), 404

        # print(f"Message found: {message}")

        # Проверка прав
        if current_user.account_type != 'admin' and current_user.id != message['user_id']:
            # print("Permission denied")
            return jsonify(success=False, error="Нет прав на удаление"),

        # Удаление
        if delete_message_from_db(message_id):
            # print("Deletion successful")
            return jsonify(success=True)

        # print("Deletion failed")
        return jsonify(success=False, error="Ошибка при удалении"), 500

    except Exception as e:
        # print(f"Error: {str(e)}")
        return jsonify(success=False, error=str(e)), 500


@app.route('/forum/reaction/<message_id>')
@login_required
def check_reaction(message_id):
    data = load_forum_data()
    message = next((msg for msg in data['messages'] if str(msg['id']) == str(message_id)), None)
    if not message:
        return jsonify(reaction='none')

    user_id = str(current_user.id)
    reaction = 'none'

    if user_id in message.get('liked_by', []):
        reaction = 'like'
    elif user_id in message.get('disliked_by', []):
        reaction = 'dislike'

    return jsonify(reaction=reaction)


@app.route('/moderation/materials')
@login_required
@role_required(['admin'])
def moderation_materials():
    # Получаем все непроверенные материалы
    materials = load_materials()
    unapproved_materials = [m for m in materials if not m.get('approved', False)]
    return render_template('moderation/materials.html', materials=unapproved_materials)


@app.route('/moderation/approve/<material_id>', methods=['POST'])
@login_required
@role_required(['admin'])
def approve_material(material_id):
    materials = load_materials()
    for material in materials:
        if material['id'] == material_id:
            material['approved'] = True
            material['approved_by'] = current_user.id
            material['approved_at'] = datetime.now().isoformat()
            break
    save_materials(materials)
    flash('Материал одобрен!', 'success')
    return redirect(url_for('moderation_materials'))


@app.route('/moderation/reject/<material_id>', methods=['POST'])
@login_required
@role_required(['admin'])
def reject_material(material_id):
    materials = load_materials()
    materials = [m for m in materials if m['id'] != material_id]
    save_materials(materials)
    flash('Материал отклонен и удален!', 'success')
    return redirect(url_for('moderation_materials'))


@app.route('/material/delete/<material_id>', methods=['POST'])
@login_required
def delete_material(material_id):
    materials = load_materials()
    material = next((m for m in materials if m['id'] == material_id), None)

    # Проверка прав: удалять может только автор или администратор
    if not material or (current_user.id != material['author_id'] and current_user.account_type != 'admin'):
        flash('У вас нет прав на удаление этого материала!', 'error')
        return redirect(url_for('learn'))

    # Удаляем материал
    materials = [m for m in materials if m['id'] != material_id]
    save_materials(materials)

    # Удаляем изображение, если оно есть
    if material.get('image'):
        try:
            image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], material['image'])
            if os.path.exists(image_path):
                os.remove(image_path)
        except Exception as e:
            print(f"Ошибка при удалении изображения: {e}")

    flash('Материал успешно удален!', 'success')
    return redirect(url_for('learn'))


@app.route('/material/edit/<material_id>', methods=['GET', 'POST'])
@login_required
def edit_material(material_id):
    materials = load_materials()
    material = next((m for m in materials if m['id'] == material_id), None)

    # Проверка прав: редактировать может только автор или администратор
    if not material or (current_user.id != material['author_id'] and current_user.account_type != 'admin'):
        flash('У вас нет прав на редактирование этого материала!', 'error')
        return redirect(url_for('learn'))

    if request.method == 'POST':
        # Обновляем данные материала
        material['title'] = request.form.get('title')
        material['content'] = request.form.get('content')
        image = request.files.get('image')
        material['approved'] = False

        # Обновляем изображение, если оно было загружено
        if image:
            # Удаляем старое изображение, если оно есть
            if material.get('image'):
                try:
                    old_image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], material['image'])
                    if os.path.exists(old_image_path):
                        os.remove(old_image_path)
                except Exception as e:
                    print(f"Ошибка при удалении старого изображения: {e}")

            # Сохраняем новое изображение
            material['image'] = image.filename
            image_path = os.path.join(current_app.config['UPLOAD_FOLDER'], image.filename)
            image.save(image_path)

        save_materials(materials)
        flash('Материал успешно обновлен!', 'success')
        return redirect(url_for('learn'))

    return render_template('learn/edit_material.html', material=material)



@app.route('/groups/create', methods=['GET', 'POST'])
@login_required
@role_required(['teacher', 'admin'])
def create_group():
    if request.method == 'POST':
        groups = load_groups()
        new_group = {
            'id': generate_id(),
            'name': request.form.get('group_name'),
            'description': request.form.get('description'),
            'token': generate_id(),  # Генерируем уникальный токен
            'created_by': current_user.id,
            'members': [ current_user.id ],
            'created_at': datetime.now().isoformat()
        }
        groups.append(new_group)
        save_groups(groups)
        return render_template('groups/create_group.html', token=new_group['token'])
    return render_template('groups/create_group.html')


@app.route('/groups/join', methods=['GET', 'POST'])
@login_required
def join_group():
    if request.method == 'POST':
        token = request.form.get('token').strip()
        groups = load_groups()
        group = next((g for g in groups if g['token'] == token), None)

        if group:
            if current_user.id not in group['members']:
                group['members'].append(current_user.id)
                save_groups(groups)
                flash('Вы успешно присоединились к группе!', 'success')
            else:
                flash('Вы уже состоите в этой группе', 'warning')
            return redirect(url_for('join_group'))

        flash('Неверный токен группы', 'error')
        return redirect(url_for('join_group'))  # Перенаправляем обратно на страницу ввода токена

    # Отображаем все flash-сообщения
    _messages = get_flashed_messages(with_categories=True)
    print(_messages)
    messages = []
    for s in _messages:
        if s[1] == "Вы успешно присоединились к группе!" or s[1] == "Вы уже состоите в этой группе" or s[1] == "Неверный токен группы":
            messages.append(s)
    return render_template('groups/join_group.html', messages=messages)


@app.route('/groups')
@login_required
def my_groups():
    # Получаем все группы
    all_groups = load_groups()

    # Фильтруем группы, где пользователь является участником
    user_groups = []
    for group in all_groups:
        if current_user.id in group['members']:
            # Находим создателя группы
            creator = get_user_by_id(group['created_by'])
            # Добавляем информацию о создателе в объект группы
            group['creator'] = creator
            user_groups.append(group)

    return render_template('groups/list.html', groups=user_groups)


@app.route('/groups/<token>')
@login_required
def group_detail(token):
    # Получаем все группы
    all_groups = load_groups()

    # Ищем группу по токену
    group = next((g for g in all_groups if g['token'] == token), None)

    if not group:
        flash('Группа не найдена', 'error')
        return redirect(url_for('my_groups'))

    # Проверяем, состоит ли пользователь в группе
    if current_user.id not in group['members']:
        flash('Вы не состоите в этой группе', 'error')
        return redirect(url_for('my_groups'))

    # Находим создателя группы
    creator = get_user_by_id(group['created_by'])
    group['creator'] = creator

    return render_template('groups/group.html',
                         group=group,
                         get_user_by_id=get_user_by_id)  # Передаем функцию в шаблон

@app.route('/groups/delete/<token>', methods=['POST'])
@login_required
@role_required(['teacher', 'admin'])
def delete_group(token):
    groups = load_groups()

    # Ищем группу для удаления
    group_to_delete = next((g for g in groups if g['token'] == token), None)

    if not group_to_delete:
        flash('Группа не найдена', 'error')
        return redirect(url_for('my_groups'))

    # Проверяем права на удаление
    if current_user.id != group_to_delete['created_by'] and current_user.account_type != 'admin':
        flash('У вас нет прав на удаление этой группы', 'error')
        return redirect(url_for('group_detail', token=token))

    # Удаляем группу
    groups = [g for g in groups if g['token'] != token]
    save_groups(groups)

    flash('Группа успешно удалена', 'success')
    return redirect(url_for('my_groups'))


@app.route('/groups/<token>/remove-member/<int:user_id>', methods=['POST'])
@login_required
def remove_member(token, user_id):
    groups = load_groups()
    group = next((g for g in groups if g['token'] == token), None)

    if not group:
        flash('Группа не найдена', 'error')
        return redirect(url_for('my_groups'))

    # Проверка прав
    if current_user.id != group['created_by'] and current_user.account_type != 'admin':
        flash('У вас нет прав для этого действия', 'error')
        return redirect(url_for('group_detail', token=token))

    # Удаляем участника
    if user_id in group['members']:
        group['members'].remove(user_id)
        save_groups(groups)
        flash('Участник успешно удален', 'success')
    else:
        flash('Участник не найден в группе', 'warning')

    return redirect(url_for('group_detail', token=token))


@app.route('/groups/<token>/add-material', methods=['POST'])
@login_required
@role_required(['teacher', 'admin'])
def add_material_to_group(token):
    groups = load_groups()
    group = next((g for g in groups if g['token'] == token), None)

    if not group:
        flash('Группа не найдена', 'error')
        return redirect(url_for('my_groups'))

    # Проверяем права на добавление материалов
    if current_user.id != group['created_by'] and current_user.account_type != 'admin':
        flash('У вас нет прав на добавление материалов в эту группу', 'error')
        return redirect(url_for('group_detail', token=token))

    # Получаем данные из формы
    material_type = request.form.get('material_type')
    material_id = request.form.get('material_id')

    # Проверяем существование материала
    if material_type == 'course':
        # Логика проверки курса
        pass
    elif material_type == 'material':
        materials = load_materials()
        material = next((m for m in materials if m['id'] == material_id), None)
        if not material:
            flash('Материал с указанным ID не найден', 'error')
            return redirect(url_for('group_detail', token=token))
    elif material_type == 'task':
        # Логика проверки задания
        pass
    else:
        flash('Неверный тип материала', 'error')
        return redirect(url_for('group_detail', token=token))

    # Добавляем материал в группу
    if 'materials' not in group:
        group['materials'] = []

    group['materials'].append({
        'type': material_type,
        'id': material_id,
        'added_by': current_user.id,
        'added_at': datetime.now().isoformat()
    })

    save_groups(groups)
    flash('Материал успешно добавлен в группу', 'success')
    return redirect(url_for('group_detail', token=token))


@app.route('/groups/<token>/remove-material/<material_id>', methods=['POST'])
@login_required
@role_required(['teacher', 'admin'])
def remove_material_from_group(token, material_id):
    groups = load_groups()
    group = next((g for g in groups if g['token'] == token), None)

    if not group:
        flash('Группа не найдена', 'error')
        return redirect(url_for('my_groups'))

    # Проверяем права на удаление
    if current_user.id != group['created_by'] and current_user.account_type != 'admin':
        flash('У вас нет прав на удаление материалов из этой группы', 'error')
        return redirect(url_for('group_detail', token=token))

    # Удаляем материал
    group['materials'] = [m for m in group['materials'] if m['id'] != material_id]
    save_groups(groups)

    flash('Материал успешно удален из группы', 'success')
    return redirect(url_for('group_detail', token=token))

if __name__ == '__main__':
    app.run(port=8080, host="127.0.0.1")
"






config.py:
"
import os


class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key-here'
    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY') or 'jwt-secret-key'
    OAUTH_CREDENTIALS = {
        'google': {
            'id': 'your-google-client-id',
            'secret': 'your-google-client-secret'
        },
        'yandex': {
            'id': 'your-yandex-client-id',
            'secret': 'your-yandex-client-secret'
        }
    }
    DATA_FOLDER = 'data/'
    UPLOAD_FOLDER = 'static/uploads/'
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
"





filters.py:
"
from datetime import datetime


def format_date(value, format='%d.%m.%Y %H:%M'):
    """Фильтр для форматирования даты."""
    if isinstance(value, str):
        value = datetime.fromisoformat(value)
    return value.strftime(format)
"




utils.py:
"
import json
import os
import time
import random
import string
from datetime import datetime

from flask import current_app
from werkzeug.security import generate_password_hash, check_password_hash


def get_users():
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'users.json')
    try:
        with open(data_path, 'r') as f:
            return json.load(f)['users']
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_users(users):
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'users.json')
    with open(data_path, 'w') as f:
        json.dump({'users': users}, f, indent=2)


def create_user(login, email, password, full_name, birth_date, account_type, school=None):
    users = get_users()

    # Проверка уникальности логина и email
    if any(u['login'] == login for u in users):
        return None, 'Логин уже занят'
    if any(u['email'] == email for u in users):
        return None, 'Email уже зарегистрирован'

    new_user = {
        'id': max([u['id'] for u in users], default=0) + 1,
        'login': login,
        'email': email,
        'password_hash': generate_password_hash(password),
        'full_name': full_name,
        'school': school,
        'birth_date': birth_date,
        'account_type': account_type,
        'created_at': datetime.now().isoformat()
    }

    users.append(new_user)
    save_users(users)
    return new_user, None

def load_messages():
    """Загрузка сообщений из файла"""
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'forum.json')
    try:
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f).get('messages', [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_to_file(filename, data):
    data_path = os.path.join(current_app.config['DATA_FOLDER'], filename)
    os.makedirs(os.path.dirname(data_path), exist_ok=True)
    with open(data_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

def generate_id():
    timestamp = str(int(time.time()))[-6:]
    random_part = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
    return f"{timestamp}_{random_part}"

def get_message_by_id(message_id):
    messages = load_forum_data().get('messages', [])
    print(f"Поиск сообщения {message_id} среди {len(messages)} сообщений")
    return next((msg for msg in messages if str(msg['id']) == str(message_id)), None)

def get_user_by_login(login):
    users = get_users()
    return next((u for u in users if u['login'] == login), None)

def get_user_by_email(email):
    users = get_users()
    return next((u for u in users if u['email'] == email), None)


def get_messages(sort_by='recent'):
    try:
        data = load_forum_data()
        messages = data.get('messages', [])

        if sort_by == 'recent':
            # Сортировка по дате (новые сверху)
            return sorted(messages, key=lambda x: x['timestamp'], reverse=True)

        elif sort_by == 'popular':
            # Сортировка по популярности (лайки минус дизлайки)
            return sorted(messages, key=lambda x: (x['likes'] - x['dislikes']), reverse=True)

        # По умолчанию возвращаем без сортировки
        return messages

    except Exception as e:
        print(f"Ошибка при получении сообщений: {str(e)}")
        return []


def save_message(message):
    """
    Сохраняет или обновляет сообщение в базе данных форума.
    - Если сообщение с таким ID уже существует, оно обновляется
    - Если сообщение новое - добавляется в список
    - Автоматически инициализирует списки реакций при необходимости
    - Возвращает True при успешном сохранении, False при ошибке
    """
    try:
        # Загрузка текущих данных
        data = load_forum_data()
        messages = data.get('messages', [])

        # Проверка и инициализация обязательных полей
        message.setdefault('liked_by', [])
        message.setdefault('disliked_by', [])

        # Поиск существующего сообщения
        found = False
        for i, msg in enumerate(messages):
            if msg['id'] == message['id']:
                # Сохраняем историю реакций при обновлении
                message['liked_by'] = msg.get('liked_by', [])
                message['disliked_by'] = msg.get('disliked_by', [])

                # Обновляем сообщение
                messages[i] = message
                found = True
                break

        # Добавление нового сообщения
        if not found:
            messages.append(message)

        # Сохранение обновленных данных
        save_forum_data({'messages': messages})
        return True

    except Exception as e:
        print(f"[!] Ошибка сохранения сообщения {message.get('id', 'unknown')}: {str(e)}")
        return False


def load_forum_data():
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'forum.json')
    try:
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'messages': []}


def save_forum_data(data):
    try:
        data_path = os.path.join(current_app.config['DATA_FOLDER'], 'forum.json')
        with open(data_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Ошибка сохранения форума: {str(e)}")
        return False

def delete_message_from_db(message_id):
    try:
        print(f"\nAttempting to delete message {message_id}")
        data = load_forum_data()
        initial_count = len(data['messages'])
        print(f"Initial messages count: {initial_count}")

        # Фильтрация сообщений
        data['messages'] = [msg for msg in data['messages'] if str(msg['id']) != str(message_id)]
        new_count = len(data['messages'])
        print(f"New messages count: {new_count}")

        if new_count == initial_count:
            print("Message not found in database")
            return False

        # Сохранение
        save_forum_data(data)
        print("Message successfully deleted")
        return True

    except Exception as e:
        print(f"Deletion error: {str(e)}")
        return False


def load_materials():
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'materials.json')
    try:
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f).get('materials', [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_materials(materials):
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'materials.json')
    with open(data_path, 'w', encoding='utf-8') as f:
        json.dump({'materials': materials}, f, indent=2, ensure_ascii=False)


def load_tasks():
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'tasks.json')
    try:
        with open(data_path, 'r', encoding='utf-8') as f:
            return json.load(f).get('tasks', [])
    except (FileNotFoundError, json.JSONDecodeError):
        return []


def save_tasks(tasks):
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'tasks.json')
    with open(data_path, 'w', encoding='utf-8') as f:
        json.dump({'tasks': tasks}, f, indent=2, ensure_ascii=False)


# В функции create_task добавить поле approved
def create_task(task_data):
    tasks = load_tasks()
    new_task = {
        'id': generate_id(),
        'approved': False,
        **task_data
    }
    tasks.append(new_task)
    save_tasks(tasks)
    return new_task


def get_solved_tasks(user_id):
    """Возвращает словарь {task_id: is_correct} для конкретного пользователя."""
    tasks = load_tasks()
    solved_tasks = {}
    for task in tasks:
        if 'solved_by' in task:
            for solver in task['solved_by']:
                if solver['user_id'] == user_id:
                    solved_tasks[task['id']] = solver['is_correct']
    return solved_tasks


def save_solved_task(user_id, task_id, is_correct):
    """Сохраняет результат решения задачи."""
    tasks = load_tasks()
    for task in tasks:
        if task['id'] == task_id:
            if 'solved_by' not in task:
                task['solved_by'] = []

            # Удаляем старый результат, если он есть
            task['solved_by'] = [s for s in task['solved_by'] if s['user_id'] != user_id]

            # Добавляем новый результат
            task['solved_by'].append({
                'user_id': user_id,
                'is_correct': is_correct,
                'timestamp': datetime.now().isoformat()
            })
            break

    save_tasks(tasks)


def load_groups():
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'groups.json')
    try:
        if not os.path.exists(data_path):
            with open(data_path, 'w', encoding='utf-8') as f:
                json.dump({'groups': []}, f)

        with open(data_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if 'groups' not in data:
                data['groups'] = []
            # Инициализируем поле materials, если его нет
            for group in data['groups']:
                if 'materials' not in group:
                    group['materials'] = []
            return data['groups']
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Ошибка загрузки групп: {str(e)}")
        return []

def save_groups(groups):
    data_path = os.path.join(current_app.config['DATA_FOLDER'], 'groups.json')
    with open(data_path, 'w', encoding='utf-8') as f:
        json.dump({'groups': groups}, f, indent=2, ensure_ascii=False)

def get_user_by_id(user_id):
    users = get_users()
    return next((u for u in users if u['id'] == user_id), None)

"










Также в проекте есть и другие файлы, они пока не работают/служат сборниками информации.
Готов ли ты к работе? Пиши функции только когда я говорю их тебе писать.